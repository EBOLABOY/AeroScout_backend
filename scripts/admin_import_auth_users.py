#!/usr/bin/env python3
"""
Import users into Supabase Auth via Admin API using Service Role Key.

Reads scripts/output/auth_import.json generated by export_auth_users.py,
supports partial import via --limit/--skip, and verifies via GET admin/users/{id}.

Usage examples:
  python scripts/admin_import_auth_users.py --limit 2
  python scripts/admin_import_auth_users.py --skip 2   # import the rest after sampling
  python scripts/admin_import_auth_users.py --verify-only

Env vars required:
  SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY
"""

import argparse
import json
import os
import sys
import time
from pathlib import Path

import requests


def load_users(json_path: Path):
    with json_path.open('r', encoding='utf-8') as f:
        data = json.load(f)
    users = data.get('users') or []
    return users


def admin_headers(srk: str):
    return {'Authorization': f'Bearer {srk}', 'apikey': srk, 'Content-Type': 'application/json'}


def create_user(base_url: str, srk: str, user: dict) -> tuple[int, str]:
    url = base_url.rstrip('/') + '/auth/v1/admin/users'
    # Build payload; pass through supported fields
    payload = {
        'id': user.get('id'),
        'email': user.get('email'),
        'encrypted_password': user.get('encrypted_password'),
        'email_confirmed_at': user.get('email_confirmed_at'),
        'app_metadata': user.get('app_metadata') or {},
        'user_metadata': user.get('user_metadata') or {},
    }
    resp = requests.post(url, headers=admin_headers(srk), json=payload, timeout=20)
    try:
        txt = resp.text
    except Exception:
        txt = ''
    return resp.status_code, txt


def get_user(base_url: str, srk: str, user_id: str) -> int:
    url = base_url.rstrip('/') + f'/auth/v1/admin/users/{user_id}'
    resp = requests.get(url, headers=admin_headers(srk), timeout=20)
    return resp.status_code


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--json', default=str(Path('scripts') / 'output' / 'auth_import.json'), help='Path to auth_import.json'
    )
    parser.add_argument('--limit', type=int, default=0, help='Limit number of users to import (0=all)')
    parser.add_argument('--skip', type=int, default=0, help='Skip N users before importing')
    parser.add_argument(
        '--verify-only', action='store_true', help='Only verify presence via Admin API without creating'
    )
    args = parser.parse_args()

    base_url = os.getenv('SUPABASE_URL')
    srk = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
    if not base_url or not srk:
        print('Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY', file=sys.stderr)
        sys.exit(1)

    users = load_users(Path(args.json))
    total = len(users)
    if total == 0:
        print('No users to process')
        return

    start = args.skip
    end = total if args.limit == 0 else min(total, start + args.limit)
    batch = users[start:end]
    print(f'Planning to process users {start}..{end-1} of {total} (count={len(batch)})')

    created = 0
    already = 0
    failed = 0

    for i, u in enumerate(batch, start=start):
        uid = u.get('id')
        if args.verify_only:
            code = get_user(base_url, srk, uid)
            if code == 200:
                already += 1
                print(f'[{i}] exists {uid}')
            else:
                print(f'[{i}] missing {uid} (HTTP {code})')
            continue

        # Check exists first
        code = get_user(base_url, srk, uid)
        if code == 200:
            already += 1
            print(f'[{i}] already exists {uid}')
            continue

        code, body = create_user(base_url, srk, u)
        if code in (200, 201):
            created += 1
            print(f'[{i}] created {uid}')
        else:
            failed += 1
            print(f'[{i}] failed {uid} -> HTTP {code}: {body[:200]}')
        time.sleep(0.1)

    print(f'Done. created={created}, already={already}, failed={failed}, processed={len(batch)}')


if __name__ == '__main__':
    main()
